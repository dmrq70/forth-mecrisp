diff --git a/terminal.s b/terminal.s
index 58d2143..3702a58 100644
--- a/terminal.s
+++ b/terminal.s
@@ -20,7 +20,7 @@
 @ Terminal code and initialisations.
 @ Porting: Rewrite this !
 
-        @ GPIO register map is similiar to STM32F4 chips.
+        @ GPIO register map is similiar to STM32F0 chips.
 
         .equ GPIOA_BASE      ,   0x48000000
         .equ GPIOA_MODER     ,   GPIOA_BASE + 0x00
@@ -42,29 +42,30 @@
         .equ RCC_APB2ENR     ,   RCC_BASE + 0x18
         .equ RCC_APB1ENR     ,   RCC_BASE + 0x1C
 
-        @ Note that the STM32F051 USART is different to the bigger STM32F1/STM32F4 chips.
-
-        .equ USART1_BASE     ,   0x40013800
-        
-        .equ USART1_CR1      ,   USART1_BASE + 0x00
-        .equ USART1_CR2      ,   USART1_BASE + 0x04
-        .equ USART1_CR3      ,   USART1_BASE + 0x08
-        .equ USART1_BRR      ,   USART1_BASE + 0x0C
-        .equ USART1_GTPR     ,   USART1_BASE + 0x10
-        .equ USART1_RTOR     ,   USART1_BASE + 0x14
-        .equ USART1_RQR      ,   USART1_BASE + 0x18
-        .equ USART1_ISR      ,   USART1_BASE + 0x1C
-        .equ USART1_ICR      ,   USART1_BASE + 0x20
-        .equ USART1_RDR      ,   USART1_BASE + 0x24
-        .equ USART1_TDR      ,   USART1_BASE + 0x28
-
-        @ Flags for USART1_ISR register:
+        @ Note that the STM32F042 USART is different to the bigger STM32F1/STM32F4 chips.
+
+
+        .equ USART2_BASE     ,   0x40004400
+
+        .equ USART2_CR1      ,   USART2_BASE + 0x00
+        .equ USART2_CR2      ,   USART2_BASE + 0x04
+        .equ USART2_CR3      ,   USART2_BASE + 0x08
+        .equ USART2_BRR      ,   USART2_BASE + 0x0C
+        .equ USART2_GTPR     ,   USART2_BASE + 0x10
+        .equ USART2_RTOR     ,   USART2_BASE + 0x14
+        .equ USART2_RQR      ,   USART2_BASE + 0x18
+        .equ USART2_ISR      ,   USART2_BASE + 0x1C
+        .equ USART2_ICR      ,   USART2_BASE + 0x20
+        .equ USART2_RDR      ,   USART2_BASE + 0x24
+        .equ USART2_TDR      ,   USART2_BASE + 0x28
+
+        @ Flags for USART2_ISR register:
           .equ RXNE            ,   BIT5
           .equ TC              ,   BIT6
           .equ TXE             ,   BIT7
 
 @ -----------------------------------------------------------------------------
-uart_init:
+uart_init: @ ( -- )
 @ -----------------------------------------------------------------------------
 
   @ Turn on the clocks for all GPIOs.
@@ -72,28 +73,28 @@ uart_init:
   ldr r0, = BIT17 + BIT18 + BIT19 + BIT20 + BIT22 @ IOPAEN IOPBEN IOPCEN IOPDEN IOPFEN
   str r0, [r1]
 
-  @ Turn on the clock for USART1.
-  ldr r1, = RCC_APB2ENR
-  ldr r0, = BIT14 @ USART1EN
+  @ Turn on the clock for USART2.
+  ldr r1, = RCC_APB1ENR
+  ldr r0, = BIT17 @ USART2EN
   str r0, [r1]
 
-  @ Set PORTA pins 9 and 10 in alternate function mode
+  @ Set PORTA pins 2 and 3 in alternate function mode
   ldr r1, = GPIOA_MODER
-  ldr r0, = 0x28280000 @ 2800 0000 is Reset value for Port A, and switch PA9 and PA10 to alternate function
+  ldr r0, = 0x280000A0 @ 2800 0000 is Reset value for Port A, and switch PA2 and PA3 to alternate function
   str r0, [r1]
 
-  @ Set alternate function 1 to enable USART1 pins on Port A
-  ldr r1, = GPIOA_AFRH
-  ldr r0, = 0x110      @ Alternate function 1 for TX and RX pins of USART1 on PORTA 
+  @ Set alternate function 1 to enable USART2 pins on Port A
+  ldr r1, = GPIOA_AFRL
+  ldr r0, = 0x1100      @ Alternate function 1 for TX and RX pins of USART2 on PORTA 
   str r0, [r1]
 
   @ Configure BRR by deviding the bus clock with the baud rate
-  ldr r1, = USART1_BRR
+  ldr r1, = USART2_BRR
   movs r0, #0x46  @ 115200 bps, ein ganz kleines bisschen langsamer...
   str r0, [r1]
 
   @ Enable the USART, TX, and RX circuit
-  ldr r1, =USART1_CR1
+  ldr r1, =USART2_CR1
   ldr r0, =BIT3+BIT2+BIT0 @ USART_CR1_UE | USART_CR1_TE | USART_CR1_RE
   str r0, [r1]
 
@@ -112,7 +113,7 @@ serial_emit: @ ( c -- ) Emit one character
    drop
    beq 1b
 
-   ldr r2, =USART1_TDR
+   ldr r2, =USART2_TDR
    strb tos, [r2]         @ Output the character
    drop
 
@@ -130,7 +131,7 @@ serial_key: @ ( -- c ) Receive one character
    beq 1b
 
    pushdatos
-   ldr r2, =USART1_RDR
+   ldr r2, =USART2_RDR
    ldrb tos, [r2]         @ Fetch the character
 
    pop {pc}
@@ -154,7 +155,7 @@ serial_qkey:  @ ( -- ? ) Is there a key press ?
 
 serial_qkey_intern:
    pushdaconst 0  @ False Flag
-   ldr r0, =USART1_ISR
+   ldr r0, =USART2_ISR
    ldr r1, [r0]     @ Fetch status
    ands r1, r2
    beq 1f
